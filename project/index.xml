<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Gareth Meredith</title>
    <link>/project/</link>
    <description>Recent content in Projects on Gareth Meredith</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Project 1: Covid Vaccination Response</title>
      <link>/project/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project1/</guid>
      <description>IntroductionIn this R markdown document, I will be exploring the Covid vaccination response of all countries of the world and how the demographics of these countries impact their responses. To do this, I will first need a relatively up-to-date dataset containing Covid vaccination data for the whole world. Luckily for me, the website kaggle had precisely the dataset I was looking for. In addition to this vaccinations dataset, I needed a dataset containing as much demographic information as possible for each country of the world.</description>
    </item>
    
    <item>
      <title>Project 2: Don&#39;t Need No Weatherman To Know When It Will Rain In Australia</title>
      <link>/project/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project2/</guid>
      <description>Donâ€™t Need No Weatherman To Know When It Will Rain In AustraliaIntroducing our Datalibrary(dplyr)weather &amp;lt;- read.csv(&amp;quot;weatherAUS.csv&amp;quot;)weather &amp;lt;- weather[,c(1,2,3,4,5,6,7,8,9,22,23)]weather &amp;lt;- weather[complete.cases(weather), ] %&amp;gt;% mutate(Rain = ifelse(RainToday == &amp;quot;Yes&amp;quot;, 1, 0))weather &amp;lt;- weather %&amp;gt;% mutate(AvgTemp = (MaxTemp-MinTemp)/2)class_diag&amp;lt;-function(probs,truth, cutoff){tab&amp;lt;-table(factor(probs&amp;gt;cutoff,levels=c(&amp;quot;FALSE&amp;quot;,&amp;quot;TRUE&amp;quot;)),truth)acc=sum(diag(tab))/sum(tab)sens=tab[2,2]/colSums(tab)[2]spec=tab[1,1]/colSums(tab)[1]ppv=tab[2,2]/rowSums(tab)[2]if(is.numeric(truth)==FALSE &amp;amp; is.logical(truth)==FALSE) truth&amp;lt;-as.numeric(truth)-1#CALCULATE EXACT AUCord&amp;lt;-order(probs, decreasing=TRUE)probs &amp;lt;- probs[ord]; truth &amp;lt;- truth[ord]TPR=cumsum(truth)/max(1,sum(truth)) FPR=cumsum(!truth)/max(1,sum(!truth))dup&amp;lt;-c(probs[-1]&amp;gt;=probs[-length(probs)], FALSE)TPR&amp;lt;-c(0,TPR[!dup],1); FPR&amp;lt;-c(0,FPR[!dup],1)n &amp;lt;- length(TPR)auc&amp;lt;- sum( ((TPR[-1]+TPR[-n])/2) * (FPR[-1]-FPR[-n]) )data.</description>
    </item>
    
  </channel>
</rss>
